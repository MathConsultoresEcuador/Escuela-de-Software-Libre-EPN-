getwd()
rivers
round(mean(rivers), digits = 0)
round(mean(rivers), digits = 2)
install.packages("reticulate")
# Depuracion y Limpieza ---------
source('CargaDatos.R') #Ejecutar el codigo contenido en el archivo especificado
# Depuracion y Limpieza ---------
getwd()
setwd('/Analisis/Datos')
setwd('Analisis/Datos')
# Depuracion y Limpieza ---------
getwd()
setwd("~/Escritorio/Modulo 2/Clase 4/ProyectoPiloto")
# Depuracion y Limpieza ---------
getwd()
source('Analisis/Datos/CargaDatos.R') #Ejecutar el codigo contenido en el archivo especificado
#Parte 1 --------------
Datos2013 <- read_csv("Analisis/Datos/BDD/TRANSACCIONES 2013.csv")
Datos2014 <- read_csv("Analisis/Datos/BDD/TRANSACCIONES 2014.csv")
Datos2015 <- read_excel("Analisis/Datos/BDD/TRANSACCIONES 2015.xlsx")
library(readxl)
Datos2015 <- read_excel("Analisis/Datos/BDD/TRANSACCIONES 2015.xlsx")
#Parte 2 #############
Datos2016 <- read_delim("Analisis/Datos/BDD/TRANSACCIONES 2016.csv",
"\t", escape_double = FALSE, locale = locale(encoding = "ISO-8859-1"),
trim_ws = TRUE)
#Parte 3 =============
Datos2017 <- read_csv("Analisis/Datos/BDD/TRANSACCIONES 2017.csv")
# Depuracion y Limpieza ---------
getwd()
source('Analisis/Datos/CargaDatos.R') #Ejecutar el codigo contenido en el archivo especificado
View(Datos2013)
View(Datos2014)
View(Datos2013)
#Datos Perdidos ------
summary(Datos2013)
cars
#Ejemplo Modelo Regresion -----
cars = cars
plot(cars)
cars$`Belén` = 2*cars$dist+(cars$speed)^2
cars
plot(cars)
dim(cars)[1]
modelo1 = lm(data=cars, `Belén` ~ dist)
summary(modelo1)
plot(modelo1)
plot(modelo1,1:4)
par(nfrow=c(2,2))
par(mfrow=c(2,2))
plot(modelo1)
par(mfrow=c(2,3))
plot(modelo1)
par(mfrow=c(2,3))
plot(modelo1,1:4)
par(mfrow=c(2,3))
plot(modelo1,1:6)
#Regresion Multiple --------
modelo2 = lm(data=cars, `Belén` ~ dist + speed)
summary(modelo2)
par(mfrow=c(2,3))
plot(modelo2,1:6)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + speed^2)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + speed^2)
summary(modelo3)
par(mfrow=c(2,3))
plot(modelo3,1:6)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = glm(data=cars, `Belén` ~ dist + speed^2)
summary(modelo3)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = glm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
par(mfrow=c(2,3))
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
par(mfrow=c(2,3))
plot(modelo3,1:6)
cars[-c(1,2,3),]
cars_limpio = cars[-c(1,2,3),]
cars_limpio
cars = cars
plot(cars)
set.seed(1) #Fijar semilla para simulación
cars$`Belén` = 2*cars$dist + (cars$speed)^2 + rnorm(dim(cars)[1],sd=2)
cars
plot(cars)
#Regresion Simple ---------
modelo1 = lm(data=cars, `Belén` ~ dist)
summary(modelo1)
par(mfrow=c(2,3))
plot(modelo1,1:6)
#Regresion Multiple --------
modelo2 = lm(data=cars, `Belén` ~ dist + speed)
summary(modelo2)
par(mfrow=c(2,3))
plot(modelo2,1:6)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
par(mfrow=c(2,3))
plot(modelo3,1:6)
#Quitar valores atipicos o puntos palanca -------
cars_limpio = cars[-c(24,35,39),]
cars_limpio
modelo4 = lm(data=cars_limpio, `Belén` ~ dist + I(speed^2))
summary(modelo4)
par(mfrow=c(2,3))
plot(modelo4,1:6)
# Depuracion y Limpieza ---------
getwd()
#Ejecutar Codigo "CargaDatos.R" -----
source('Analisis/Datos/CargaDatos.R') #Ejecutar el codigo contenido en el archivo especificado
anova(modelo4)
summary(Datos2014)
summary(Datos2015)
summary(Datos2016)
summary(Datos2017)
View(Datos2013)
getwd()
#Reemplazar Perdidos (*,+,-,'N')
Datos2013[Datos2013== '*']
#Reemplazar Perdidos (*,+,-,'N')
Datos2013[is.na(Datos2013)]
is.na(Datos2013)
class(Datos2013)
#Transformar a Data.frame ------
{
Datos2013 <- as.data.frame(Datos2013)
Datos2014 <- as.data.frame(Datos2014)
Datos2015 <- as.data.frame(Datos2015)
Datos2016 <- as.data.frame(Datos2016)
Datos2017 <- as.data.frame(Datos2017)
}
class(Datos2013)
Datos2013=='*'
Datos2013=='*' | Datos2013== '+' | Datos2013=='-' | Datos2013=='N'
#Reemplazar Perdidos (*,+,-,'N') -----
Datos2013[Datos2013=='*' | Datos2013== '+' | Datos2013=='-' | Datos2013=='N'] = NA
View(Datos2013)
View(Datos2014)
Datos2014[Datos2014=='*' | Datos2014== '+' | Datos2014=='-' | Datos2014=='N'] = NA
Datos2015[Datos2015=='*' | Datos2015== '+' | Datos2015=='-' | Datos2015=='N'] = NA
Datos2016[Datos2016=='*' | Datos2016== '+' | Datos2016=='-' | Datos2016=='N'] = NA
Datos2017[Datos2017=='*' | Datos2017== '+' | Datos2017=='-' | Datos2017=='N'] = NA
View(Datos2015)
Datos2015=='*'
Datos2015$`Nº Serie`
Datos2015$`Nº Serie`=="*"
Datos2015[Datos2015=="*" | Datos2015== '+' | Datos2015=='-' | Datos2015=='N'] = NA
class(Datos2015$`Nº Serie`)
class(Datos2014$`Nº Serie`)
class(Datos2015$`Nº Serie`)
Datos2015$`Nº Serie`=="*"
Datos2015$`Nº Serie`=='*'
str(Datos2015)
Datos2015$`Fecha Caducidad`=='*'
Datos2014$`Fecha Caducidad`=='*'
str(Datos2015)
#Arregalar 2015 ----------------------
Datos2015$`Fecha Aplicada` = as.character(Datos2015$`Fecha Aplicada`)
#Arregalar 2015 ----------------------
Datos2015$`Fecha Aplicada` = as.character(Datos2015$`Fecha Aplicada`)
Datos2015$`Fecha Caducidad` = as.character(Datos2015$`Fecha Caducidad`)
Datos2015$`Fecha Aplicada Fecha Modificación` = as.character(Datos2015$`Fecha Aplicada Fecha Modificación` )
#Datos2015$`Fecha Aplicada Modificada por Usuario`
Datos2015$`Hora Creación` = as.character(Datos2015$`Hora Creación`)
Datos2015$Creado = as.character(Datos2015$Creado)
Datos2015[Datos2015=="*" | Datos2015== '+' | Datos2015=='-' | Datos2015=='N'] = NA
View(Datos2015)
#Resumen de Datos Perdidos x Variable  ---------
porcentaje_NA<-function(x){
perdidos=sum(is.na(x))
total=length(x)
porcentaje=perdidos/total
return(porcentaje)
}
apply(Datos2013,MARGIN = 1,porcentaje_NA)
apply(Datos2013,MARGIN = 2,porcentaje_NA)
apply(Datos2013,MARGIN = 2,porcentaje_NA)
#Resumen de Datos Perdidos x Variable  ---------
porcentaje_NA<-function(x){
perdidos=sum(is.na(x))
total=length(x)
porcentaje=100*perdidos/total
return(porcentaje)
}
apply(Datos2013,MARGIN = 2,porcentaje_NA)
ResumenNAs = apply(Datos2013,MARGIN = 2,porcentaje_NA)
ResumenNAs = apply(Datos2013,MARGIN = 2,porcentaje_NA)
ResumenNAs
ResumenNAs = data.frame(Variables = names(ResumenNAs) , Porcentaje_perdidos = ResumenNAs)
View(ResumenNAs)
rownames(ResumenNAs) = 1:dim(ResumenNAs)[1]
View(ResumenNAs)
ResumenNAs$Variables[ResumenNAs$Porcentaje_perdidos <= 12]
ResumenNAs$Porcentaje_perdidos <= 12
ResumenNAs$Variables
View(ResumenNAs)
#Eliminar Variables que no tienen informacion ----
nombres_var = ResumenNAs$Variables[ResumenNAs$Porcentaje_perdidos <= 12]
nombres_var = as.character(nombres_var)
nombres_var
#Resumen de Datos Perdidos x Variable  ---------
ResumenNAs = function(BDD){
#Porcentaje de perdidos
porcentaje_NA<-function(x){
perdidos=sum(is.na(x))
total=length(x)
porcentaje=100*perdidos/total
return(porcentaje)
}
resumen= apply(BDD,MARGIN = 2,porcentaje_NA)
resumen= data.frame(Variables = names(resumen) , Porcentaje_perdidos = resumen)
rownames(resumen) = 1:dim(resumen)[1]
return(resumen)
}
ResumenNAs(Datos2013)
# Análisis de Datos depurados ---------
getw
# Análisis de Datos depurados ---------
getwd()
resumen2013 = ResumenNAs(Datos2013)
#Tablas de Resumen de Perdidos
resumen2013 = ResumenNAs(Datos2013)
resumen2014 = ResumenNAs(Datos2014)
resumen2015 = ResumenNAs(Datos2015)
resumen2016 = ResumenNAs(Datos2016)
resumen2017 = ResumenNAs(Datos2017)
View(resumen2013)
#Consolidación -------
Datos2013$`Año` = 2013
View(Datos2013)
Datos2014$`Año` = 2014
Datos2015$`Año` = 2015
Datos2016$`Año` = 2016
Datos2017$`Año` = 2017
View(Datos2013)
View(Datos2014)
bind_rows(Datos2013, Datos2014)
# Depuracion y Limpieza ---------
library(dplyr)
bind_rows(Datos2013, Datos2014)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015)
View(Datos2015)
Datos2013 %>%
bind_rows(Datos2014)
Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015)
Datos2015$`Ref Orden 2`
Datos2013$`Ref Orden 2`
Datos2014$`Ref Orden 2`
Datos2015$`Ref Orden 2`
as.numeric(Datos2015$`Ref Orden 2`)
Datos2016$`Ref Orden 2`
#Corregir Columna Ref Orden 2
Datos2015$`Ref Orden 2` = as.numeric(Datos2015$`Ref Orden 2`)
Datos2016$`Ref Orden 2` = as.numeric(Datos2016$`Ref Orden 2`)
Datos2017$`Ref Orden 2` = as.numeric(Datos2017$`Ref Orden 2`)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
Datos2015$`Ref Orden 3` = as.numeric(Datos2015$`Ref Orden 3`)
Datos2016$`Ref Orden 3` = as.numeric(Datos2016$`Ref Orden 3`)
Datos2017$`Ref Orden 3` = as.numeric(Datos2017$`Ref Orden 3`)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
class(Datos2015$`Hora Creación`)
class(Datos2016$`Hora Creación`)
class(Datos2017$`Hora Creación`)
class(Datos2014$`Hora Creación`)
class(Datos2013$`Hora Creación`)
class(Datos2015$`Hora Creación`)
as.difftime(Datos2015$`Hora Creación`)
class(Datos2015$`Hora Creación`)
Datos2015$`Hora Creación`
as.Date(Datos2015$`Hora Creación`)
as.Date(Datos2015)
as.Date(Datos2015$`Hora Creación`)
Datos2015aux=Datos2015
Datos2015aux$`Hora Creación`=as.Date(Datos2015$`Hora Creación`)
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015aux) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
as.Date(Datos2014$`Hora Creación`)
