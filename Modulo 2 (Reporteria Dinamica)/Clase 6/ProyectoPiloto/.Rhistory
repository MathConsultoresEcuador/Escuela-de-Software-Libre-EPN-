}
ResumenNAs(Datos2013)
#Tablas de Resumen de Perdidos
resumenNA= ResumenNAs(BDDconsolidada)
#Tablas de Resumen de Perdidos
resumen_perdidos= ResumenNAs(BDDconsolidada)
View(resumen_perdidos)
resumen_perdidos$Porcentaje_perdidos<=12
#Eliminar Variables que no tienen informacion ----
resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
#Eliminar Variables que no tienen informacion ----
VariablesL = resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
VariablesL
#Eliminar Variables que no tienen informacion ----
VariablesL = resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
VariablesL = as.character(VariablesL)
VariablesL
VariablesL
#Codigo Equivalente en dplyr
VariablesL = resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables) %>% as.character()
VariablesL
resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables)
#Codigo Equivalente en dplyr
VariablesL = resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables)
View(VariablesL)
#Codigo Equivalente en dplyr
VariablesL = resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables)
VariablesL = VariablesL$Variables
VariablesL
VariablesL = as.character(Variables)
#Codigo Equivalente en dplyr
VariablesL = resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables)
VariablesL = as.character(VariablesL)
VariablesL
#Codigo Equivalente en dplyr
VariablesL = resumen_perdidos %>% filter(Porcentaje_perdidos<=12) %>%
select(Variables)
class(VariablesL)
VariablesL = resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
VariablesL = as.character(VariablesL)
VariablesL
#Eliminar Variables que no tienen informacion ----
VariablesL = resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
VariablesL = as.character(VariablesL)
VariablesL
BDDconsolidada %>% select(VariablesL)
BDDLimpia=BDDconsolidada %>% select(VariablesL)
View(BDDLimpia)
BDDLimpia
View(BDDLimpia)
#Datos Perdidos ------
{
summary(Datos2013) ; class(Datos2013)
summary(Datos2014) ; class(Datos2014)
summary(Datos2015) ; class(Datos2015)
summary(Datos2016) ; class(Datos2016)
summary(Datos2017) ; class(Datos2017)
}
#Transformar a Data.frame ------
{
Datos2013 <- as.data.frame(Datos2013)
Datos2014 <- as.data.frame(Datos2014)
Datos2015 <- as.data.frame(Datos2015)
Datos2016 <- as.data.frame(Datos2016)
Datos2017 <- as.data.frame(Datos2017)
}
#Arregalar 2015 (Dato) ----------------------
Datos2015$`Fecha Aplicada` = as.character(Datos2015$`Fecha Aplicada`)
Datos2015$`Fecha Caducidad` = as.character(Datos2015$`Fecha Caducidad`)
Datos2015$`Fecha Aplicada Fecha Modificación` = as.character(Datos2015$`Fecha Aplicada Fecha Modificación` )
Datos2015$`Hora Creación` = as.character(Datos2015$`Hora Creación`)
Datos2015$Creado = as.character(Datos2015$Creado)
#Reemplazar Perdidos (*,+,-,'N') ---------------
Datos2013[Datos2013=='*' | Datos2013== '+' | Datos2013=='-' | Datos2013=='N'] = NA
Datos2014[Datos2014=='*' | Datos2014== '+' | Datos2014=='-' | Datos2014=='N'] = NA
Datos2015[Datos2015=="*" | Datos2015== '+' | Datos2015=='-' | Datos2015=='N'] = NA
Datos2016[Datos2016=='*' | Datos2016== '+' | Datos2016=='-' | Datos2016=='N'] = NA
Datos2017[Datos2017=='*' | Datos2017== '+' | Datos2017=='-' | Datos2017=='N'] = NA
#Consolidación -------
Datos2013$`Año` = 2013
Datos2014$`Año` = 2014
Datos2015$`Año` = 2015
Datos2016$`Año` = 2016
Datos2017$`Año` = 2017
bind_rows(Datos2013, Datos2014)
#Corregir Columna Ref Orden 2
Datos2015$`Ref Orden 2` = as.numeric(Datos2015$`Ref Orden 2`)
Datos2016$`Ref Orden 2` = as.numeric(Datos2016$`Ref Orden 2`)
Datos2017$`Ref Orden 2` = as.numeric(Datos2017$`Ref Orden 2`)
Datos2015$`Ref Orden 3` = as.numeric(Datos2015$`Ref Orden 3`)
Datos2016$`Ref Orden 3` = as.numeric(Datos2016$`Ref Orden 3`)
Datos2017$`Ref Orden 3` = as.numeric(Datos2017$`Ref Orden 3`)
class(Datos2015$`Hora Creación`)
#ERROR: Cohercion difftime - character ---------
library(lubridate)
library(hms)
#
# aux = unlist(strsplit(Datos2015$`Hora Creación`," "))
# par= 2*(1:(length(aux)/2))
#
# horas=aux[par]
# fechas=aux[-par]
#
# corregido = paste(fechas,horas,sep="T")
#
# corregido = ymd_hms(corregido)
# class(corregido)
corregido=ymd_hms(Datos2015$`Hora Creación`)
Datos2015$`Hora Creación` = corregido
#-----------------------------------------------
Datos2013 = Datos2013[,c(-37,-57,-59,-60)]
Datos2014 = Datos2014[,c(-37,-57,-59,-60)]
Datos2015 = Datos2015[,c(-37,-57,-59,-60)]
Datos2016 = Datos2016[,c(-37,-57,-59,-60)]
Datos2017 = Datos2017[,c(-37,-57,-59,-60)]
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
source('Analisis/Datos/CargaDatos.R') #Ejecutar el codigo contenido en el archivo especificado
#Datos Perdidos ------
{
summary(Datos2013) ; class(Datos2013)
summary(Datos2014) ; class(Datos2014)
summary(Datos2015) ; class(Datos2015)
summary(Datos2016) ; class(Datos2016)
summary(Datos2017) ; class(Datos2017)
}
#Transformar a Data.frame ------
{
Datos2013 <- as.data.frame(Datos2013)
Datos2014 <- as.data.frame(Datos2014)
Datos2015 <- as.data.frame(Datos2015)
Datos2016 <- as.data.frame(Datos2016)
Datos2017 <- as.data.frame(Datos2017)
}
#Arregalar 2015 (Dato) ----------------------
Datos2015$`Fecha Aplicada` = as.character(Datos2015$`Fecha Aplicada`)
Datos2015$`Fecha Caducidad` = as.character(Datos2015$`Fecha Caducidad`)
Datos2015$`Fecha Aplicada Fecha Modificación` = as.character(Datos2015$`Fecha Aplicada Fecha Modificación` )
Datos2015$`Hora Creación` = as.character(Datos2015$`Hora Creación`)
Datos2015$Creado = as.character(Datos2015$Creado)
#Reemplazar Perdidos (*,+,-,'N') ---------------
Datos2013[Datos2013=='*' | Datos2013== '+' | Datos2013=='-' | Datos2013=='N'] = NA
Datos2014[Datos2014=='*' | Datos2014== '+' | Datos2014=='-' | Datos2014=='N'] = NA
Datos2015[Datos2015=="*" | Datos2015== '+' | Datos2015=='-' | Datos2015=='N'] = NA
Datos2016[Datos2016=='*' | Datos2016== '+' | Datos2016=='-' | Datos2016=='N'] = NA
Datos2017[Datos2017=='*' | Datos2017== '+' | Datos2017=='-' | Datos2017=='N'] = NA
#Consolidación -------
Datos2013$`Año` = 2013
Datos2014$`Año` = 2014
Datos2015$`Año` = 2015
Datos2016$`Año` = 2016
Datos2017$`Año` = 2017
bind_rows(Datos2013, Datos2014)
#Corregir Columna Ref Orden 2
Datos2015$`Ref Orden 2` = as.numeric(Datos2015$`Ref Orden 2`)
Datos2016$`Ref Orden 2` = as.numeric(Datos2016$`Ref Orden 2`)
Datos2017$`Ref Orden 2` = as.numeric(Datos2017$`Ref Orden 2`)
Datos2015$`Ref Orden 3` = as.numeric(Datos2015$`Ref Orden 3`)
Datos2016$`Ref Orden 3` = as.numeric(Datos2016$`Ref Orden 3`)
Datos2017$`Ref Orden 3` = as.numeric(Datos2017$`Ref Orden 3`)
class(Datos2015$`Hora Creación`)
#ERROR: Cohercion difftime - character ---------
library(lubridate)
library(hms)
#
# aux = unlist(strsplit(Datos2015$`Hora Creación`," "))
# par= 2*(1:(length(aux)/2))
#
# horas=aux[par]
# fechas=aux[-par]
#
# corregido = paste(fechas,horas,sep="T")
#
# corregido = ymd_hms(corregido)
# class(corregido)
corregido=ymd_hms(Datos2015$`Hora Creación`)
Datos2015$`Hora Creación` = corregido
#-----------------------------------------------
Datos2013 = Datos2013[,c(-37,-57,-59,-60)]
Datos2014 = Datos2014[,c(-37,-57,-59,-60)]
Datos2015 = Datos2015[,c(-37,-57,-59,-60)]
Datos2016 = Datos2016[,c(-37,-57,-59,-60)]
Datos2017 = Datos2017[,c(-37,-57,-59,-60)]
BDDconsolidada = Datos2013 %>%
bind_rows(Datos2014) %>%
bind_rows(Datos2015) %>%
bind_rows(Datos2016) %>%
bind_rows(Datos2017)
#Resumen de Datos Perdidos x Variable  ---------
#Funcion para crear resumen de datos perdidos
ResumenNAs = function(BDD){
#Porcentaje de perdidos
porcentaje_NA<-function(x){
perdidos=sum(is.na(x))
total=length(x)
porcentaje=100*perdidos/total
return(porcentaje)
}
resumen= apply(BDD,MARGIN = 2,porcentaje_NA)
resumen= data.frame(Variables = names(resumen) , Porcentaje_perdidos = resumen)
rownames(resumen) = 1:dim(resumen)[1]
return(resumen)
}
#Tablas de Resumen de Perdidos
resumen_perdidos= ResumenNAs(BDDconsolidada)
View(resumen_perdidos)
View(BDDconsolidada)
#Eliminar Variables que no tienen informacion ----
VariablesL = resumen_perdidos[resumen_perdidos$Porcentaje_perdidos<=12,1]
VariablesL = as.character(VariablesL)
VariablesL
BDDLimpia=BDDconsolidada %>% select(VariablesL)
View(BDDLimpia)
#Guardar Data Limpia
getwd()
save(BDDLimpia,file="Analisis/Datos/Data_limpia.RData")
# Transformación a Formato Estándar --------
getwd()
load("Analisis/Datos/Data_limpia.RData")
View(BDDLimpia)
BDDLimpia$`Descripción Transacción`
# Transformación a Formato Estándar --------
library(dplyr)
BDDLimpia %>% distinct(`Descripción Transacción`)
BDDLimpia$`Desc. Planta`
BDDLimpia %>% distinct(`Desc. Planta`)
BDDLimpia$Ubicación
BDDLimpia %>% distinct(`Ubicación`)
BDDLimpia %>% distinct(`Almacén`)
BDDLimpia %>% distinct(`Desc. Planta`)
BDDLimpia %>% distinct(`Ubicación`)
BDDLimpia %>% distinct(`Almacén`)
BDDLimpia %>% distinct(`Cajón`)
BDDLimpia$`Tipo Orden`
BDDLimpia %>% distinct(`Tipo Orden`)
BDDLimpia %>% distinct(`Realizado Por`)
BDDLimpia %>% distinct(`Descripción Transacción`)
BDDLimpia %>% distinct(`Desc. Planta`)
BDDLimpia %>% distinct(`Ubicación`)
BDDLimpia %>% distinct(`Almacén`)
BDDLimpia %>% distinct(`Cajón`)
BDDLimpia %>% distinct(`Almacén`)
BDDLimpia %>% distinct(`Tipo Orden`)
BDDLimpia %>% distinct(`Realizado Por`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`,`Tipo Orden`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`)
BDDLimpia %>% distinct(`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`,`Realizado Por`)
BDDLimpia %>% distinct(`Realizado Por`,`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`)
BDDLimpia %>% distinct(`Tipo Orden`)
BDDLimpia %>% distinct(`Descripción Transacción`,`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`,`Realizado Por`)
BDDLimpia %>% distinct(`Descripción Transacción`,`Desc. Planta`,`Ubicación`,`Almacén`,`Cajón`,`Realizado Por`)
BDDLimpia %>% distinct(`Descripción Transacción`,
`Desc. Planta`,`Ubicación`,
`Almacén`,`Cajón`,`Realizado Por`) %>%
arrange(`Descripción Transacción`)
# Transferencias Internas (Recepción - Salida)
BDDLimpia %>% filter(`Descripción Transacción`%in%
c('Transferencia Interna - Recepción','Transferencia Interna - Salida'))
class(BDDLimpia$`Fecha Aplicada`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad))
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Anual=sum(`Coste Total`))
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Anual=sum(`Coste Total`)) %>%
arrange(`Artículo`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Anual=sum(`Coste Total`)) %>%
arrange(`Artículo`,`Año`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Anual=sum(`Coste Total`)) %>%
arrange(`Coste_Anual`,`Artículo`,`Año`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Coste_Anual`),`Artículo`,`Año`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste,Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Coste_Anual`),`Artículo`,`Año`)
BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Coste_Medio`),`Artículo`,`Año`)
aux = BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Coste_Medio`),`Artículo`,`Año`)
View(aux)
aux = BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Cantidad_Anual`),`Artículo`,`Año`)
#Grafico ---------------------------------
library(forecast)
library(highcharter)
# Transformación a Formato Estándar --------
library(dplyr)
library(reshape2)
library(dplyr)
library(reshape2)
getwd()
#source("Analisis/Datos/LimpiezaDatos.R")
load("Analisis/Datos/Data_limpia.RData")
BDDLimpia %>% distinct(`Descripción Transacción`)
BDDLimpia %>% distinct(`Desc. Planta`)
BDDLimpia %>% distinct(`Ubicación`)
BDDLimpia %>% distinct(`Almacén`)
BDDLimpia %>% distinct(`Cajón`)
BDDLimpia %>% distinct(`Tipo Orden`)
BDDLimpia %>% distinct(`Realizado Por`)
BDDLimpia %>% distinct(`Descripción Transacción`,
`Desc. Planta`,`Ubicación`,
`Almacén`,`Cajón`,`Realizado Por`) %>%
arrange(`Descripción Transacción`)
# arrange(desc(`Descripción Transacción`))
# Transferencias Internas (Recepción - Salida)
BDDLimpia %>% filter(`Descripción Transacción` %in%
c('Transferencia Interna - Recepción',
'Transferencia Interna - Salida'))
aux1 = BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Cantidad_Anual`),`Artículo`,`Año`)
Rotacion= BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
arrange(desc(`Cantidad_Anual`),`Artículo`,`Año`) %>%
dcast(formula =  `Descripción Artículo` ~ `Año`,fun.aggregate =  sum, value.var="Cantidad_Anual") %>%
arrange(desc(`2017`),desc(`2016`))
# Rotacion = BDDLimpia %>% group_by(`Artículo`, `Descripción Artículo`,`Año`) %>%
#   summarise(Cantidad_Anual=sum(Cantidad),Coste_Medio=mean(Coste),Coste_Total_Anual=sum(`Coste Total`)) %>%
#   arrange(desc(`Cantidad_Anual`),`Artículo`,`Año`) %>%
#   dcast(formula =  `Descripción Artículo` ~ `Año`,fun.aggregate =  sum, value.var="Cantidad_Anual")
#Grafico ---------------------------------
library(forecast)
library(highcharter)
fila=1
articulo = Rotacion[fila,1]
serie = as.numeric(Rotacion[fila,-1])
(serie=ts(serie))
modelo = ets(serie)
prediccion = forecast(modelo, h = 3, level = 85)
hchart(prediccion)
modelo = ar(serie,order.max = 3)
prediccion = forecast(modelo, h = 3, level = 85)
hchart(prediccion)
modelo = ets(serie,order.max = 3)
prediccion = forecast(modelo, h = 3, level = 85)
hchart(prediccion)
grafica = function(Datos,articulo){
Rotacion=Datos
fila=articulo
articulo = Rotacion[fila,1]
serie = as.numeric(Rotacion[fila,-1])
(serie=ts(serie))
modelo = ets(serie,order.max = 3)
prediccion = forecast(modelo, h = 3, level = 85)
graf = hchart(prediccion)
return(graf)
}
grafica(Rotacion,1)
grafica(Rotacion,4)
# Análisis de Datos depurados ---------
getwd()
#Ejemplo Modelo Regresion -----
cars = cars
plot(cars)
set.seed(1) #Fijar semilla para simulación
cars$`Belén` = 2*cars$dist + (cars$speed)^2 + rnorm(dim(cars)[1],sd=2)
cars
plot(cars)
#Regresion Simple ---------
modelo1 = lm(data=cars, `Belén` ~ dist)
summary(modelo1)
par(mfrow=c(2,3))
plot(modelo1,1:6)
#Regresion Multiple --------
modelo2 = lm(data=cars, `Belén` ~ dist + speed)
summary(modelo2)
par(mfrow=c(2,3))
plot(modelo2,1:6)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
par(mfrow=c(2,3))
plot(modelo3,1:6)
#Quitar valores atipicos o puntos palanca -------
cars_limpio = cars[-c(24,35,39),]
cars_limpio
modelo4 = lm(data = cars_limpio, `Belén` ~ dist + I(speed^2))
summary(modelo4)
anova(modelo4)
par(mfrow=c(2,3))
plot(modelo4,1:6)
getwd()
save(Rotacion,file="Analisis/Datos/Rotacion.RData")
#Cargar Datos
getwd()
load(file="Analisis/Datos/Rotacion.RData")
#Funcion que grafica series
grafica = function(Datos,articulo){
Rotacion=Datos
fila=articulo
articulo = Rotacion[fila,1]
serie = as.numeric(Rotacion[fila,-1])
(serie=ts(serie))
modelo = ets(serie,order.max = 3)
prediccion = forecast(modelo, h = 3, level = 85)
graf = hchart(prediccion)
return(graf)
}
getwd()
#Ejemplo Modelo Regresion -----
cars = cars
plot(cars)
set.seed(1) #Fijar semilla para simulación
cars$`Belén` = 2*cars$dist + (cars$speed)^2 + rnorm(dim(cars)[1],sd=2)
cars
plot(cars)
#Regresion Simple ---------
modelo1 = lm(data=cars, `Belén` ~ dist)
summary(modelo1)
par(mfrow=c(2,3))
plot(modelo1,1:6)
#Regresion Multiple --------
modelo2 = lm(data=cars, `Belén` ~ dist + speed)
summary(modelo2)
par(mfrow=c(2,3))
plot(modelo2,1:6)
#Regresion Multiple (no lineal en la forma funcional)----
modelo3 = lm(data=cars, `Belén` ~ dist + I(speed^2))
summary(modelo3)
par(mfrow=c(2,3))
plot(modelo3,1:6)
#Quitar valores atipicos o puntos palanca -------
cars_limpio = cars[-c(24,35,39),]
cars_limpio
modelo4 = lm(data = cars_limpio, `Belén` ~ dist + I(speed^2))
summary(modelo4)
anova(modelo4)
par(mfrow=c(2,3))
plot(modelo4,1:6)
save(cars,cars_limpio,modelo1,modelo2,modelo3,modelo4,
file="Analisis/Modelos.RData")
shiny::runApp('~/Escritorio/Proyecto_Interfaz_Usuario4')
runApp('~/Escritorio/Aplicativo Dgip/Modelo5_materias')
# Analisis de Regresión -----------------
load("Analisis/Modelos.RData")
plot(cars)
par(mfrow=c(2,3))
plot(modelo1,1:6)
plot(modelo2,1:6)
plot(modelo3,1:6)
plot(modelo4,1:6)
par(mfrow=c(1,1))
hchart(modelo1)
hchart(forecast(modelo1,h=3,level=90))
forecast(modelo1,h=3,level=90)
# Visualizacion -----------
#Rotacion Inventario ---------------------
library(forecast)
forecast(modelo1,h=3,level=90)
hchart(predict(modelo1,h=3,level=90))
predict(modelo1,h=3,level=90)
library(knitr)
library(DT)
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
names(cars)
names(cars)
library(knitr)
library(DT)
load("Analisis/Modelos.RData")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
summary(cars)
datatable(summary(cars))
install.packages("Hmisc")
library(knitr)
library(DT)
load("Analisis/Modelos.RData")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
plot(cars$dist,cars$Belén)
plot(cars$dist,cars$Belén)
abline(modelo1,lwd=3,col='red')
modelo1= lm(data=cars,`Belén`~dist)
plot(cars$dist,cars$Belén)
abline(modelo1)
load("Analisis/Modelos.RData")
plot(cars$dist,cars$Belén)
abline(modelo1,lwd=3,col='red')
install.packages("prettydoc")
View(modelo1)
install.packages("pander")
# “default”, “cerulean”, “journal”, “flatly”, “readable”, “spacelab”, “united”, “cosmo”, “lumen”, “paper”, “sandstone”, “simplex”, “yeti”
library(knitr)
library(DT)
load("Analisis/Modelos.RData")
knitr::opts_chunk$set(echo = FALSE,warning = FALSE,message = FALSE)
resumen1= summary(modelo1)
View(resumen1)
library(xtable)
library(xtable)
library(xtable)
print(xtabel(anova(modelo1)),type="html")
print(xtable(anova(modelo1)),type="html")
install.packages("gapminder")
